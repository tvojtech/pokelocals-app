export interface Player {
  userid: string;
  firstname: string;
  lastname: string;
  birthdate: string;
  starter: boolean;
  order: number;
  seed: number;
  creationdate: string;
  lastmodifieddate: string;
  late: boolean;
  byes: number;
  dropped?: {
    round: number;
  };
}

export type PlayerScore = {
  wins: number;
  ties: number;
  losses: number;
};

export interface TournamentData {
  name: string;
  id?: string | undefined;
  city: string;
  state: string | null;
  country: string;
  roundtime: number;
  finalsroundtime: number;
  startdate: string;
  organizer?: { popid?: string; name?: string };
  lessswiss: boolean;
  autotablenumber: boolean;
  overflowtablestart: number;
}

export enum Division {
  JUNIORS = 'JUNIORS',
  SENIORS = 'SENIORS',
  MASTERS = 'MASTERS',
}

export interface DivisionStandings {
  finished: { id: string; place: number }[];
  dnf: { id: string }[];
}

export type TournamentStandings = Record<Division, DivisionStandings>;

export interface XmlTournament {
  type: number;
  stage: number;
  version: string;
  gametype: string;
  mode: string;
  data: TournamentData;
  timeelapsed: number;
  players: Player[];
  pods: Pod[];
  standings?: TournamentStandings;
}
export interface Tournament extends Omit<XmlTournament, 'players'> {
  players: Record<string, Player>;
  scores: Record<string, PlayerScore>;
}

export interface Pod {
  category: string;
  stage: string;

  subgroups: Subgroup[];
  rounds: Round[];
}

export interface Subgroup {
  number: string;
  players: string[];
}

export interface Round {
  number: string;
  type: string;
  stage: string;

  matches: Match[];
}

export enum MatchOutcome {
  not_finished = '0',
  player1_win = '1',
  player2_win = '2',
  tie = '3',
  player1_bye = '4',
  player2_bye = '5',

  // generated by copilot, not sure if these are correct
  player1_win_bye = '6',
  player2_win_bye = '7',
  player1_win_drop = '8',
  player2_win_drop = '9',
  tie_drop = '10',
}

export interface Match {
  outcome: string;
  tablenumber: number;
  player1: string;
  player2?: string;
}
